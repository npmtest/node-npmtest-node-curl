{"/home/travis/build/npmtest/node-npmtest-node-curl/test.js":"/* istanbul instrument in package npmtest_node_curl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-curl/lib.npmtest_node_curl.js":"/* istanbul instrument in package npmtest_node_curl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_curl = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_curl = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-curl/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-curl && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_curl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_curl\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_curl.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_curl.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_curl.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_curl.__dirname + '/lib.npmtest_node_curl.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-curl/node_modules/node-curl/index.js":"// Generated by ToffeeScript 1.4.0\n(function() {\n  var CurlBuilder;\n\n  CurlBuilder = require('./lib/CurlBuilder');\n\n  module.exports = CurlBuilder.create();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-curl/node_modules/node-curl/lib/CurlBuilder.js":"// Generated by ToffeeScript 1.6.2-5\n(function() {\n  var Curl, CurlBuilder, e,\n    __hasProp = {}.hasOwnProperty,\n    __slice = [].slice;\n\n  try {\n    Curl = require(__dirname + '/Curl');\n  } catch (_error) {\n    e = _error;\n    Curl = require(__dirname + '/Curl');\n  }\n\n  function merge_chunks(chunks, length) {\n    var chunk, data, position, _i, _len;\n    data = new Buffer(length);\n    position = 0;\n    for (_i = 0, _len = chunks.length; _i < _len; _i++) {\n      chunk = chunks[_i];\n      chunk.copy(data, position);\n      position += chunk.length;\n    }\n    return data;\n  };\n\n  CurlBuilder = (function() {\n    function CurlBuilder() {}\n\n    CurlBuilder.curls = {};\n\n    CurlBuilder.id = 0;\n\n    CurlBuilder.close_all = function() {\n      var curl, id, _ref;\n      _ref = CurlBuilder.curls;\n      for (id in _ref) {\n        if (!__hasProp.call(_ref, id)) continue;\n        curl = _ref[id];\n        curl.end();\n        delete CurlBuilder.curls[id];\n      }\n      return CurlBuilder;\n    };\n\n    CurlBuilder.create = function(defaultOptions) {\n      function curl() {\n        return curl.perform.apply(curl, arguments);\n      };\n      curl.perform = function() {\n        var args, c, cb, header_length, k, length, v, _ref, _ref1, _ref2, _ref3, _ref4;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        if (this.running) {\n          throw new Error('the cURL session is busy, use curl.create to create another cURL Session');\n        }\n        if (!this.curl_) {\n          throw new Error('the cURL is closed.');\n        }\n        this.running = true;\n        cb = args.pop();\n        this.url = args[0], this.options = args[1];\n        if ((_ref = this.options) == null) {\n          this.options = {};\n        }\n        length = 0;\n        header_length = 0;\n        this.debug = (_ref1 = (_ref2 = this.defaultOptions.DEBUG) != null ? _ref2 : this.options.DEBUG) != null ? _ref1 : this.debug;\n        this.effectiveOptions = {};\n        _ref3 = this.defaultOptions;\n        for (k in _ref3) {\n          v = _ref3[k];\n          this.effectiveOptions[k] = v;\n        }\n        _ref4 = this.options;\n        for (k in _ref4) {\n          v = _ref4[k];\n          this.effectiveOptions[k] = v;\n        }\n        this.setOptions(this.effectiveOptions);\n        this.setOptions({\n          URL: this.url\n        });\n        c = this.curl_;\n        c.chunks = [];\n        c.header_chunks = [];\n        c.on('data', function(chunk) {\n          curl.log(\"receive \" + chunk.length + \" bytes\");\n          c.chunks.push(chunk);\n          length += chunk.length;\n          return chunk.length;\n        });\n        c.on('header', function(chunk) {\n          curl.log(\"receive \" + chunk.length + \" header\");\n          c.header_chunks.push(chunk);\n          header_length += chunk.length;\n          return chunk.length;\n        });\n        c.on('end', function() {\n          var data, header,\n            _this = this;\n          curl.log(\"receive succeeded.\");\n          curl.running = false;\n          data = merge_chunks(c.chunks, length);\n          header = merge_chunks(c.header_chunks, header_length);\n          c.chunks = [];\n          c.header_chunks = [];\n          if (c.options.RAW) {\n            curl.body = data;\n            curl.header = header;\n          } else {\n            curl.body = data.toString();\n            curl.header = header.toString();\n          }\n          curl.status = curl.code = c.getinfo('RESPONSE_CODE');\n          process.nextTick(function() {\n            return cb.call(curl, null, curl);\n          });\n        });\n        c.on('error', function(err) {\n          var _this = this;\n          curl.log(\"receive failed: \" + err.message);\n          curl.running = false;\n          process.nextTick(function() {\n            return cb.call(curl, err, null);\n          });\n        });\n        this.log('perform');\n        return c.perform();\n      };\n      curl.setDefaultOptions = function(options, reset) {\n        if (options == null) {\n          options = {};\n        }\n        if (reset == null) {\n          reset = true;\n        }\n        defaultOptions = options;\n        if (reset) {\n          this.log('Set default options and reset cURL');\n          return this.reset();\n        }\n      };\n      curl.log = function(text) {\n        if (this.debug) {\n          return console.info((\"[cURL \" + this.id + \"] \") + text);\n        }\n      };\n      curl.setOptions = function(options) {\n        var k, v;\n        if (options == null) {\n          options = {};\n        }\n        for (k in options) {\n          if (!__hasProp.call(options, k)) continue;\n          v = options[k];\n          this.log(\"Set option '\" + k + \"' to '\" + v + \"'\");\n          this.curl_.setopt(k, v);\n        }\n        return this;\n      };\n      curl.setopts = function(options) {\n        if (options == null) {\n          options = {};\n        }\n        return this.setOptions(options);\n      };\n      curl.info = function(info) {\n        if (this.curl_ == null) {\n          throw new Error('curl is closed');\n        }\n        return this.curl_.getinfo(info);\n      };\n      curl.end = function() {\n        if (this.curl_ != null) {\n          this.curl_.close();\n        }\n        this.curl_ = null;\n        this.body = null;\n        delete CurlBuilder.curls[this.id];\n        return this.log(\"closed.\");\n      };\n      curl.close = function() {\n        return this.end();\n      };\n      curl.open = function() {\n        if (curl.id == null) {\n          curl.id = ++CurlBuilder.id;\n        }\n        this.log(\"opening.\");\n        this.curl_ = new Curl();\n        this.curl_.options = {};\n        this.defaultOptions = defaultOptions != null ? defaultOptions : {};\n        CurlBuilder.curls[curl.id] = curl;\n        return this.log(\"opened.\");\n      };\n      curl.reset = function() {\n        this.log('reset');\n        if (this.curl_) {\n          this.end();\n        }\n        return this.open();\n      };\n      curl.create = function(defaultOptions) {\n        return CurlBuilder.create(defaultOptions);\n      };\n      curl.get_count = function() {\n        return Curl.get_count();\n      };\n      curl.open();\n      return curl;\n    };\n\n    return CurlBuilder;\n\n  }).call(this);\n\n  process.on('exit', function() {\n    return CurlBuilder.close_all();\n  });\n\n  module.exports = CurlBuilder;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-node-curl/node_modules/node-curl/lib/Curl.js":"// Generated by ToffeeScript 1.6.2-5\n(function() {\n  var Curl, curls, e, id, m, p,\n    __hasProp = {}.hasOwnProperty;\n\n  try {\n    Curl = require(__dirname + '/../build/Release/node-curl').Curl;\n  } catch (_error) {\n    e = _error;\n    Curl = require(__dirname + '/../build/default/node-curl').Curl;\n  }\n\n  Curl.prototype.setopt_user_ = function(option_id, value) {\n    return this.options[option_id] = value;\n  };\n\n  Curl.prototype.setopt_httppost = function(rows) {\n    var cols, k, option_id, row, v;\n    this.httppost = (function() {\n      var _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = rows.length; _i < _len; _i++) {\n        row = rows[_i];\n        cols = [];\n        for (k in row) {\n          if (!__hasProp.call(row, k)) continue;\n          v = row[k];\n          k = k.toUpperCase();\n          if ((option_id = Curl.httppost_options[k]) != null) {\n            cols.push(option_id);\n            if (!(v instanceof Buffer)) {\n              v = new Buffer(v.toString());\n            }\n            cols.push(v);\n          } else {\n            throw new Error(\"invalid http post option \" + k);\n          }\n        }\n        _results.push(cols);\n      }\n      return _results;\n    })();\n    this.setopt_httppost_(this.httppost);\n    return this;\n  };\n\n  Curl.prototype.setopt = function(option_name, value) {\n    var option, option_id;\n    option = option_name.toUpperCase();\n    if ((option_id = Curl.user_options[option]) != null) {\n      if (option === 'MULTIPART') {\n        this.setopt_httppost(value);\n      } else {\n        this.setopt_user_(option_id, value);\n      }\n    } else if ((option_id = Curl.slist_options[option]) != null) {\n      this.setopt_slist_(option_id, value);\n    } else if ((option_id = Curl.integer_options[option]) != null) {\n      this.setopt_int_(option_id, value >> 0);\n    } else if ((option_id = Curl.string_options[option]) != null) {\n      if (value == null) {\n        throw new Error(\"Cannot set option \" + option_name + \" to \" + value + \".\");\n      }\n      this.setopt_str_(option_id, value.toString());\n    } else {\n      throw new Error(\"unsupported option \" + option);\n    }\n    return this;\n  };\n\n  Curl.prototype.getinfo = function(oinfo) {\n    var info, info_id;\n    info = oinfo.toUpperCase();\n    if ((info_id = Curl.slist_infos[info]) != null) {\n      return this.getinfo_slist_(info_id);\n    } else if ((info_id = Curl.integer_infos[info]) != null) {\n      return this.getinfo_int_(info_id);\n    } else if ((info_id = Curl.string_infos[info]) != null) {\n      return this.getinfo_str_(info_id);\n    } else if ((info_id = Curl.double_infos[info]) != null) {\n      return this.getinfo_double_(info_id);\n    } else {\n      throw new Error(\"unsupported info \" + oinfo);\n    }\n  };\n\n  Curl.user_options = {\n    RAW: 'RAW',\n    DEBUG: 'DEBUG',\n    MULTIPART: 'MULTIPART'\n  };\n\n  id = 0;\n\n  curls = {};\n\n  Curl.prototype.on = function(event, callback) {\n    var _this = this;\n    switch (event) {\n      case 'data':\n        this.on_write = function(chunk) {\n          return callback.call(_this, chunk);\n        };\n        break;\n      case 'header':\n        this.on_header = function(chunk) {\n          return callback.call(_this, chunk);\n        };\n        break;\n      case 'error':\n        this.on_error = function(e) {\n          delete curls[_this.id];\n          return callback.call(_this, e);\n        };\n        break;\n      case 'end':\n        this.on_end = function() {\n          delete curls[_this.id];\n          return callback.call(_this);\n        };\n        break;\n      default:\n        throw new Error(\"invalid event type \" + event);\n    }\n    return this;\n  };\n\n  Curl.prototype.close = function() {\n    delete curls[this.id];\n    return this.close_();\n  };\n\n  Curl.prototype.perform = function() {\n    this.id = ++id;\n    curls[this.id] = this;\n    this.perform_();\n    Curl.process();\n    return this;\n  };\n\n  m = 0;\n\n  p = console.log;\n\n  Curl.process = function() {\n    var once;\n    if (Curl.in_process) {\n      return;\n    }\n    return (once = function() {\n      var n, w;\n      n = Curl.process_();\n      if (n > 0) {\n        Curl.in_process = true;\n        if (n > 8192 && m < 10) {\n          ++m;\n          return process.nextTick(once);\n        } else {\n          m = 0;\n          w = (8192 - n) * 80 / 8192 >> 0;\n          if (w < 0) {\n            w = 0;\n          }\n          return setTimeout(once, w);\n        }\n      } else {\n        return Curl.in_process = false;\n      }\n    })();\n  };\n\n  module.exports = Curl;\n\n}).call(this);\n"}